package fr.utbm.ia54.acotsp

/** 
 * 
 */
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.ArrayList
import java.util.UUID
import java.util.Random;
import java.util.HashSet

/** 
 * @author Omen
 * 
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent ACOManager {
	uses Logging, InnerContextAccess, DefaultContextInteractions, Lifecycle

	var myUUID = UUID.randomUUID

	var acoParameters : ACOParameters

	var paths : ArrayList<ArrayList<Integer>>

	var pathsLength : ArrayList<Float>

	var currentBestPath : ArrayList<Integer>

	var currentBestPathLength : Float

	var pheromones = new ArrayList<ArrayList<Float>>

	var numberOfIterationsDone : Integer

	var numberOfIterationsWithoutChanges : Integer

	var acoAgentsReady : ArrayList<UUID>

	on Initialize {
		loggingName = "ACOManager"
		info("The agent was started.")
	}

	on Destroy {
		info("The agent was stopped.")
	}

	on NewOptimization {
		info("Nouvelle optimisation")
		acoParameters = occurrence.acoParameters as ACOParameters
		numberOfIterationsDone = 0
		numberOfIterationsWithoutChanges = 0
		currentBestPathLength = 0f
		initializePheromones()
		launchACOAgents()
	}

	on IterationFinished {
		synchronized (paths) {
			synchronized (pathsLength) {
				var path = occurrence.path
				var pathLength = occurrence.pathLength
				var generator = new Random()
				if (generator.nextInt(100) < acoParameters.probabilityOfMutation*100) {
					path = mutation(path)
					pathLength = computePathLength(path)
				}
				paths.add(path)
				pathsLength.add(pathLength)
				if (paths.size() === acoParameters.numberOfAnts) {
					if (numberOfIterationsDone == 0)
						currentBestPathLength = pathLength
					numberOfIterationsDone++
					if (numberOfIterationsWithoutChanges > acoParameters.frequencyOfMutation) {
						numberOfIterationsWithoutChanges = 0
						var newPaths = new ArrayList<ArrayList<Integer>>
						var newPathsLength = new ArrayList<Float>
						// info('Mutation')
						for (p : paths) {
							var newPath = mutation(p)
							var newPathLength = computePathLength(newPath)
							newPaths.add(newPath)
							newPathsLength.add(newPathLength)
						}
						paths = newPaths
						pathsLength = newPathsLength
					}
					pheromones = updatePheromones()
					if (pathsLength.get(pathsLength.indexOf(pathsLength.min())) < currentBestPathLength) {
						currentBestPath = paths.get(pathsLength.indexOf(pathsLength.min()))
						currentBestPathLength = pathsLength.get(pathsLength.indexOf(pathsLength.min()))
						numberOfIterationsWithoutChanges = 0
						info(
							"Itération : " + numberOfIterationsDone + " Meilleur chemin : " + currentBestPathLength +
								' Parcours : ' + currentBestPath.toString)
					} else {
						numberOfIterationsWithoutChanges++
					}
					if (numberOfIterationsDone === acoParameters.numberOfIterations) {
						emit(new OptimizationFinished(pheromones, currentBestPath, currentBestPathLength))
						info("Fin d'optimisation  " + "meilleur chemin : " + currentBestPathLength + ' parcours' +
							currentBestPath.toString)
					} else {
						emit(new GuiRepaint(pheromones, currentBestPath, currentBestPathLength, numberOfIterationsDone))
						launchIteration()
					}
				}
			}
		}
	}

	on AgentIsReady {
		acoAgentsReady.add(occurrence.source.UUID)
		if (acoAgentsReady.size == acoParameters.numberOfAnts)
			launchIteration()
	}

	def launchACOAgents() {
		acoAgentsReady = new ArrayList<UUID>
		for (var i = 0; i < acoParameters.numberOfAnts; i++) {
			val childID = UUID.randomUUID
			// info("Spawning new ACOAgent" + childID + "on City :" + i)
			var startingCity = (Math.random() * acoParameters.numberOfCities).toInteger
			ACOAgent.spawnInContextWithID(childID, innerContext, myUUID, startingCity, acoParameters)
		}
	}

	def launchIteration() {
		paths = new ArrayList<ArrayList<Integer>>
		pathsLength = new ArrayList<Float>
		for (acoAgent : acoAgentsReady) {
			innerContext.defaultSpace.emit(myUUID, new NewIteration(pheromones))[it.UUID == acoAgent]
		}
	}

	def initializePheromones {
		for (var i = 0; i < acoParameters.numberOfCities; i++) {
			var temp = new ArrayList<Float>
			for (var j = 0; j < acoParameters.numberOfCities; j++) {
				if (i !== j) {
					temp.add(1f)
				} else {
					temp.add(0f)
				}
			}
			pheromones.add(temp)
		}
	}

	def updatePheromones() {
		var newPheromones = new ArrayList<ArrayList<Float>>
		for (var i = 0; i < acoParameters.numberOfCities; i++) {
			var temp = new ArrayList<Float>
			for (var j = 0; j < acoParameters.numberOfCities; j++) {
				var newValue = acoParameters.pheromoneEvaporationFactor * pheromones.get(i).get(j) +
					sumOfPheromoneDeltaComputation(i, j)
				if (newValue < 1e-45) {
					newValue = 1e-45f
				} else if (i == j) {
					newValue = 0f
				}
				temp.add(newValue)
			}
			newPheromones.add(temp)
		}
		return newPheromones
	}

	def updatePheromonesWithMutation() {
		var newPheromones = new ArrayList<ArrayList<Float>>
		var minPheromones = 0f
		var minPheromonesIndex = new Pair<Integer, Integer>(0, 0)
		var maxPheromones = 0f
		var maxPheromonesIndex = new Pair<Integer, Integer>(0, 0)
		for (var i = 0; i < acoParameters.numberOfCities; i++) {
			var temp = new ArrayList<Float>
			for (var j = 0; j < acoParameters.numberOfCities; j++) {
				var newValue = acoParameters.pheromoneEvaporationFactor * pheromones.get(i).get(j) +
					sumOfPheromoneDeltaComputation(i, j)
				if (i == 0 && j == 1)
					minPheromones = newValue
				if (newValue < 1e-45) {
					newValue = 1e-45f
				} else if (i == j) {
					newValue = 0f
				}
				temp.add(newValue)
				if (newValue < minPheromones && newValue > 0f) {
					minPheromones = newValue
					minPheromonesIndex = new Pair<Integer, Integer>(i, j)
				} else if (newValue > maxPheromones) {
					maxPheromones = newValue
					maxPheromonesIndex = new Pair<Integer, Integer>(i, j)
				}
			}
			newPheromones.add(temp)
		}
		info(
			'Mutation de ' + minPheromonesIndex.toString + " value : " + minPheromones + ' à ' +
				maxPheromonesIndex.toString + ' value : ' + maxPheromones)

		if (minPheromonesIndex.getKey() != minPheromonesIndex.getValue() &&
			maxPheromonesIndex.getKey() != maxPheromonesIndex.getValue()) {
			newPheromones.get(minPheromonesIndex.getKey()).set(minPheromonesIndex.getValue(), maxPheromones)
			newPheromones.get(maxPheromonesIndex.getKey()).set(maxPheromonesIndex.getValue(), minPheromones)
		}

		return newPheromones
	}

	def sumOfPheromoneDeltaComputation(i : Integer, j : Integer) : float {
		var sumOfpheromoneDelta = 0f
		synchronized (paths) {
			synchronized (pathsLength) {
				for (var k = 0; k < paths.size(); k++) {
					if (i != j && isEdgeVisited(paths.get(k), i, j)) {
						sumOfpheromoneDelta += 1 / pathsLength.get(k)
					}
				}
			}
		}
		return sumOfpheromoneDelta
	}

	def isEdgeVisited(path : ArrayList<Integer>, i : Integer, j : Integer) : boolean {
		var response = false
		if (path.get(0) == i && path.get(path.size - 1) == j) {
			response = true
		} else if (path.get(0) == j && path.get(path.size - 1) == i) {
			response = true
		} else {
			for (var n = 0; n < path.size - 1; n++) {
				if (path.get(n) == i && path.get(n + 1) == j) {
					response = true
				} else if (path.get(n) == j && path.get(n + 1) == i) {
					response = true
				}
			}
		}
		return response
	}

	def computePathLength(path : ArrayList<Integer>) {
		var length = 0f
		for (var i = 0; i < path.size - 1; i++)
			length = length + acoParameters.distances.get(path.get(i)).get(path.get(i + 1))
		length = length + acoParameters.distances.get(path.get(path.size - 1)).get(path.get(0))
		return length
	}

	def mutation(path : ArrayList<Integer>) {
		var generator = new Random()
		var t = path.get(generator.nextInt(path.size))
		var temp = new ArrayList<Integer>
		for (var i = 0; i < acoParameters.numberOfCities; i++) {
			if (acoParameters.attachedCluster.get(i) == acoParameters.attachedCluster.get(t))
				temp.add(i)
		}
		var s = temp.get(generator.nextInt(temp.size))
		path.set(path.indexOf(t), s)
		return path
	}

}
