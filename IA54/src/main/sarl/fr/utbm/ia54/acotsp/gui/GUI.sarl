package fr.utbm.ia54.acotsp.gui

import fr.utbm.ia54.acotsp.gui.GuiPanel
import java.util.ArrayList
import io.sarl.bootstrap.SREBootstrap
import io.sarl.bootstrap.SRE
import io.sarl.lang.core.AgentContext
import java.util.UUID
import io.sarl.lang.core.EventSpace
import io.sarl.core.OpenEventSpace
import fr.utbm.ia54.acotsp.NewOptimization
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Event
import fr.utbm.ia54.acotsp.IterationFinished
import fr.utbm.ia54.acotsp.OptimizationFinished
import fr.utbm.ia54.acotsp.GuiRepaint

class GUI extends GuiPanel
implements EventListener {

	public static val id = UUID::randomUUID
			/** 
		 * SRE Kernel instance
		 */
	var kernel : SREBootstrap
	

	/** 
	 * The default SARL context where environment and boids are spawned
	 */
	var defaultSARLContext : AgentContext

	/** 
	 * Identifier of the environment
	 */
	var environment : UUID

	/** 
	 * the vent space used to establish communication between GUI and agents,
	 * Especially enabling GUI to forward start event to the environment, 
	 * respectively the environment to send GUIRepain at each simulation step to the GUI
	 */
	var ^space : OpenEventSpace
	
	def repaint(pheromones : ArrayList<ArrayList<Float>>, bestPath : ArrayList<Integer> , bestPathLength : Float ){
		this.panel.setBestTour(bestPath)
		this.panel.setPheromones(pheromones)
		this.setStatus("Best path length is : " + bestPathLength.toString())
		this.panel.repaint()
	}
	

	override runOptimization() {
		
		System.out.println("runOptimization sarl")
		
		kernel = SRE::getBootstrap
		
		defaultSARLContext = kernel.startWithoutAgent
		
		environment = UUID::randomUUID
		^space = defaultSARLContext.defaultSpace as OpenEventSpace
		
		// Registering to receive GUIRepaint events
		^space.register(this)	
		
		// Sending start to Environment
		^space.emit(id, new NewOptimization(this.acoParameters))
	}

	override stopOptimization() {
		this.setStatus("Stopped Optimization")
		System.out.println("stopOptimization sarl")

		kernel = SRE::getBootstrap
		

		defaultSARLContext = kernel.startWithoutAgent

		environment = UUID::randomUUID
		^space = defaultSARLContext.defaultSpace as OpenEventSpace
		
		^space.emit(id, new OptimizationFinished(null ,null, null )) //TODO fill in the parameters
		
	}
	
	
	def receiveEvent(^event : Event) {
		if(^event instanceof GuiRepaint){
			this.setPath(^event.bestPath, ^event.bestPathLength)
			this.panel.setPheromones(^event.pheromones)
			this.setStatus("Iteration nÂ°" + ^event.numberOfIterationsDone + ", current best path length for "+this.gtsp.getName+" is : " +
				^event.bestPathLength)
			this.repaint()
		} else if (^event instanceof OptimizationFinished){
			this.setPath(^event.bestPath, ^event.bestPathLength)
			this.panel.setPheromones(^event.pheromones)
			this.repaint()
			this.setStatus(
				"Optimization finished, best path length for " + this.gtsp.getName + " is " + ^event.bestPathLength)	
				}
	}
	
	def getID : UUID {
		return this.id
	}
	

	
}
