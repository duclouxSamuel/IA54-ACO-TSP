/** 
 * 
 */
package fr.utbm.ia54.acotsp

import java.util.ArrayList

/** 
 * @author yaben
 * 
 */
capacity ProbabilitiesComputation {
	def probabilitiesComputation(currentCity : Integer, probabilities : ArrayList<Double>,
		visitedCities : ArrayList<Integer>, visitedClusterss : ArrayList<Integer>,
		pheromones : ArrayList<ArrayList<Float>>) : ArrayList<Double>
}

@SuppressWarnings("potential_field_synchronization_problem")
skill SimpleProbabilitiesComputationSkill implements ProbabilitiesComputation {
	var numberOfCities : Integer
	var distances : ArrayList<ArrayList<Float>>
	var attachedCluster : ArrayList<Integer>
	var pheromoneRegulationFactor : Float
	var visibilityRegulationFactor : Float

	new (
		inumberOfCities : Integer,
		idistances : ArrayList<ArrayList<Float>>,
		iattachedCluster : ArrayList<Integer>,
		ipheromoneRegulationFactor : Float,
		ivisibilityRegulationFactor : Float
	) {
		this.numberOfCities = inumberOfCities
		this.distances = idistances
		this.attachedCluster = iattachedCluster
		this.pheromoneRegulationFactor = ipheromoneRegulationFactor
		this.visibilityRegulationFactor = ivisibilityRegulationFactor
	}

	def probabilitiesComputation(currentCity : Integer, probabilities : ArrayList<Double>,
		visitedCities : ArrayList<Integer>, visitedClusters : ArrayList<Integer>,
		pheromones : ArrayList<ArrayList<Float>>) : ArrayList<Double> {
		var sumOfAllowedCities = 0d

		for (var i = 0; i < numberOfCities; i++) {
			if (!visitedClusters.contains(attachedCluster.get(i)))
				sumOfAllowedCities +=
					Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
						Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor)
		}
		for (var i = 0; i < numberOfCities; i++) {
			var probability = 0d
			if (!visitedClusters.contains(attachedCluster.get(i)) && sumOfAllowedCities > 0) {
				probability = Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
					Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor) /
					sumOfAllowedCities
			}
			if (currentCity == i) {
				probabilities.add(0d)
			} else {
				probabilities.add(probability)
			}
		}
		return probabilities
	}

}

@SuppressWarnings("potential_field_synchronization_problem")
skill ProbabilitiesComputationWithGroupInfluenceSkill implements ProbabilitiesComputation {
	var numberOfCities : Integer
	var distances : ArrayList<ArrayList<Float>>
	var attachedCluster : ArrayList<Integer>
	var pheromoneRegulationFactor : Float
	var visibilityRegulationFactor : Float

	new (
		inumberOfCities : Integer,
		idistances : ArrayList<ArrayList<Float>>,
		iattachedCluster : ArrayList<Integer>,
		ipheromoneRegulationFactor : Float,
		ivisibilityRegulationFactor : Float
	) {
		this.numberOfCities = inumberOfCities
		this.distances = idistances
		this.attachedCluster = iattachedCluster
		this.pheromoneRegulationFactor = ipheromoneRegulationFactor
		this.visibilityRegulationFactor = ivisibilityRegulationFactor
	}

	def probabilitiesComputation(currentCity : Integer, probabilities : ArrayList<Double>,
		visitedCities : ArrayList<Integer>, visitedClusters : ArrayList<Integer>,
		pheromones : ArrayList<ArrayList<Float>>) : ArrayList<Double> {
		var sumOfAllowedCities = 0d
		var sumOfAllowedCitiesWithGroupInfluence = 0d
		var factorOfAllowedCitiesGroup = new ArrayList<Double>
		for (var i = 0; i < numberOfCities; i++) {
			if (!visitedClusters.contains(attachedCluster.get(i)))
				sumOfAllowedCities +=
					Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
						Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor)
		}
		for (var i = 0; i < numberOfCities; i++) {
			var sumOfClusterCities = 0d
			if (!visitedClusters.contains(attachedCluster.get(i)) && sumOfAllowedCities > 0) {
				sumOfClusterCities +=
					Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
						Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor)
				factorOfAllowedCitiesGroup.add(sumOfClusterCities / sumOfAllowedCities)
			} else {
				factorOfAllowedCitiesGroup.add(0d)
			}
		}
		for (var i = 0; i < numberOfCities; i++) {
			if (!visitedClusters.contains(attachedCluster.get(i)))
				sumOfAllowedCitiesWithGroupInfluence +=
					Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
						Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor) *
						factorOfAllowedCitiesGroup.get(i)
		}

		for (var i = 0; i < numberOfCities; i++) {
			var probability = 0d
			if (sumOfAllowedCitiesWithGroupInfluence > 0) {
				probability = Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
					Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor) *
					factorOfAllowedCitiesGroup.get(i) / sumOfAllowedCitiesWithGroupInfluence
			}
			if (currentCity == i) {
				probabilities.add(0d)
			} else {
				probabilities.add(probability)
			}
		}

		return probabilities
	}

}
