/** 
 * 
 */
package fr.utbm.ia54.acotsp

import org.eclipse.xtend.lib.annotations.Accessors
import java.util.ArrayList

/** 
 * @author yaben
 * 
 */
event NewOptimization {
	var acoParameters : ACOParameters

	new (p : ACOParameters) {
		acoParameters = p
	}
}

event NewIteration {
	var pheromones : ArrayList<ArrayList<Float>>

	new(p : ArrayList<ArrayList<Float>>) {
		pheromones = p
	}
}

event IterationFinished {
	var path : ArrayList<Integer>
	var pathLength : Float

	new(p : ArrayList<Integer>, pl : Float) {
		path = p
		pathLength = pl
	}

}

event OptimizationFinished {
	var pheromones : ArrayList<ArrayList<Float>>
	var bestPath : ArrayList<Integer>
	var bestPathLength : Float

	new(p : ArrayList<ArrayList<Float>>, bstPath : ArrayList<Integer>, bstPathLength : Float) {
		pheromones = p
		bestPath = bstPath
		bestPathLength = bstPathLength
	}
}

event GuiRepaint {
	var pheromones : ArrayList<ArrayList<Float>>
	var bestPath : ArrayList<Integer>
	var bestPathLength : Float

	new(p : ArrayList<ArrayList<Float>>, bstPath : ArrayList<Integer>, bstPathLength : Float) {
		pheromones = p
		bestPath = bstPath
		bestPathLength = bstPathLength
	}
}

event AgentIsReady

class ACOParameters {

	// Nombre de villes
	@Accessors
	var numberOfCities : Integer

	// Nombre de clusters
	@Accessors
	var numberOfClusters : Integer

	// Matrice des distances entre les villes
	@Accessors
	var distances : ArrayList<ArrayList<Float>>

	// Matrice des positions des villes
	@Accessors
	var positions : ArrayList<ArrayList<Float>>

	// Liste de l'appartenance des villes aux clusters
	@Accessors
	var attachedCluster : ArrayList<Integer>

	// Facteur d'évaporation des phéromones
	@Accessors
	var pheromoneEvaporationFactor : Float

	// Facteur de régulation de l'influence du taux de phéromones
	@Accessors
	var pheromoneRegulationFactor : Float

	// Facteur de régulation de l'influence de la proximité entre les villes
	@Accessors
	var visibilityRegulationFactor : Float

	// Nombre de fourmis
	@Accessors
	var numberOfAnts : Integer

	// Nombre d'itérations réalisées lors d'une optimisation
	@Accessors
	var numberOfIterations : Integer

	// Fréquence (nb d'itérations) des grosses mutations
	@Accessors
	var frequencyOfMutation : Integer

	// Probabilité de la petite mutation
	@Accessors
	var probabilityOfMutation : Float

	new (inumberOfCities : Integer, inumberOfClusters : Integer, idistances : ArrayList<ArrayList<Float>>,
		ipositions : ArrayList<ArrayList<Float>>, iattachedCluster : ArrayList<Integer>,
		ipheromoneEvaporationFactor : Float, ipheromoneRegulationFactor : Float, ivisibilityRegulationFactor : Float,
		inumberOfAnts : Integer, inumberOfIterations : Integer, ifrequencyOfMutation : Integer,
		iprobabilityOfMutation : Float) {
		numberOfCities = inumberOfCities
		numberOfClusters = inumberOfClusters
		distances = idistances
		positions = ipositions
		attachedCluster = iattachedCluster
		pheromoneEvaporationFactor = ipheromoneEvaporationFactor
		pheromoneRegulationFactor = ipheromoneRegulationFactor
		visibilityRegulationFactor = ivisibilityRegulationFactor
		numberOfAnts = inumberOfAnts
		numberOfIterations = inumberOfIterations
		frequencyOfMutation = ifrequencyOfMutation
		probabilityOfMutation = iprobabilityOfMutation
	}

	new (acoParameters : ACOParameters) {
		numberOfCities = acoParameters.numberOfCities
		numberOfClusters = acoParameters.numberOfClusters
		distances = acoParameters.distances
		positions = acoParameters.positions
		attachedCluster = acoParameters.attachedCluster
		pheromoneEvaporationFactor = acoParameters.pheromoneEvaporationFactor
		pheromoneRegulationFactor = acoParameters.pheromoneRegulationFactor
		visibilityRegulationFactor = acoParameters.visibilityRegulationFactor
		numberOfAnts = acoParameters.numberOfAnts
		numberOfIterations = acoParameters.numberOfIterations
	}

}
