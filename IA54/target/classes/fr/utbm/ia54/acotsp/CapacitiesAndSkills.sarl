/** 
 * 
 */
package fr.utbm.ia54.acotsp

import java.util.ArrayList

/** 
 * @author yaben
 * 
 */
capacity ProbabilitiesComputation {
	def probabilitiesComputation(currentCity : Integer, probabilities : ArrayList<Float>,
		visitedCities : ArrayList<Integer>, visitedClusterss : ArrayList<Integer>,
		pheromones : Double[][]) : ArrayList<Float>
}

@SuppressWarnings("potential_field_synchronization_problem")
skill SimpleProbabilitiesComputationSkill implements ProbabilitiesComputation {

	var numberOfCities : Integer
	var distances : Integer[][]
	var attachedCluster : Integer[]
	var pheromoneRegulationFactor : Float
	var visibilityRegulationFactor : Float

	new (
		inumberOfCities : Integer,
		idistances : Integer[][],
		iattachedCluster : Integer[],
		ipheromoneRegulationFactor : Float,
		ivisibilityRegulationFactor : Float
	) {
		this.numberOfCities = inumberOfCities
		this.distances = idistances
		this.attachedCluster = iattachedCluster
		this.pheromoneRegulationFactor = ipheromoneRegulationFactor
		this.visibilityRegulationFactor = ivisibilityRegulationFactor
	}

	def probabilitiesComputation(currentCity : Integer, probabilities : ArrayList<Float>,
		visitedCities : ArrayList<Integer>, visitedClusters : ArrayList<Integer>,
		pheromones : Double[][]) : ArrayList<Float> {
		var sumOfAllowedCities = 0d

		for (var i = 0; i < numberOfCities; i++) {
			if (!visitedClusters.contains(attachedCluster.get(i)))
				sumOfAllowedCities +=
					Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
						Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor)
		}
		for (var i = 0; i < numberOfCities; i++) {
			var probability = 0d
			if (!visitedClusters.contains(attachedCluster.get(i))) {
				probability = Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
					Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor) /
					sumOfAllowedCities
			}
			probabilities.add(probability.toFloat)
		}

		return probabilities
	}

}

@SuppressWarnings("potential_field_synchronization_problem")
skill ProbabilitiesComputationWithGroupInfluenceSkill implements ProbabilitiesComputation {
	var numberOfCities : Integer
	var distances : Integer[][]
	var attachedCluster : Integer[]
	var pheromoneRegulationFactor : Float
	var visibilityRegulationFactor : Float

	new (
		inumberOfCities : Integer,
		idistances : Integer[][],
		iattachedCluster : Integer[],
		ipheromoneRegulationFactor : Float,
		ivisibilityRegulationFactor : Float
	) {
		this.numberOfCities = inumberOfCities
		this.distances = idistances
		this.attachedCluster = iattachedCluster
		this.pheromoneRegulationFactor = ipheromoneRegulationFactor
		this.visibilityRegulationFactor = ivisibilityRegulationFactor
	}

	def probabilitiesComputation(currentCity : Integer, probabilities : ArrayList<Float>,
		visitedCities : ArrayList<Integer>, visitedClusters : ArrayList<Integer>,
		pheromones : Double[][]) : ArrayList<Float> {
		var sumOfAllowedCities = 0d
		var sumOfAllowedCitiesWithGroupInfluence = 0d
		var factorOfAllowedCitiesGroup : ArrayList<Double> = new ArrayList<Double>
		for (var i = 0; i < numberOfCities; i++) {
			if (!visitedClusters.contains(attachedCluster.get(i)))
				sumOfAllowedCities +=
					Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
						Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor)
		}
		for (var i = 0; i < numberOfCities; i++) {
			var sumOfClusterCities = 0d
			if (!visitedClusters.contains(attachedCluster.get(i)))
				sumOfClusterCities +=
					Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
						Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor)
			factorOfAllowedCitiesGroup.add(sumOfClusterCities / sumOfAllowedCities)
		}
		for (var i = 0; i < numberOfCities; i++) {
			if (!visitedClusters.contains(attachedCluster.get(i)))
				sumOfAllowedCitiesWithGroupInfluence +=
					Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
						Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor) *
						factorOfAllowedCitiesGroup.get(i)
		}

		for (var i = 0; i < numberOfCities; i++) {
			var probability = Math.pow(pheromones.get(currentCity).get(i) as double, pheromoneRegulationFactor) *
				Math.pow(1 / distances.get(currentCity).get(i) as double, visibilityRegulationFactor) *
				factorOfAllowedCitiesGroup.get(i) / sumOfAllowedCitiesWithGroupInfluence
			probabilities.add(probability.toFloat)
		}

		return probabilities
	}

}
