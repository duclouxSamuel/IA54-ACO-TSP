package fr.utbm.ia54.acotsp

/** 
 * 
 */

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.ArrayList
import java.util.UUID

/** 
 * @author Omen
 * 
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent ACOManager {
	uses Logging, InnerContextAccess, DefaultContextInteractions, Lifecycle

	var myUUID = UUID.randomUUID

	var acoParameters : ACOParameters

	var paths : ArrayList<ArrayList<Integer>>

	var pathsLength : ArrayList<Integer>

	var currentBestPath : ArrayList<Integer>

	var currentBestPathLength : Integer

	var pheromones : Double[][]

	var numberOfIterationsDone : Integer

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent was started.")
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on NewOptimization {
		acoParameters = occurrence.acoParameters as ACOParameters
		launchACOAgents()
		launchIterations()
	}

	on IterationFinished {
		paths.add(occurrence.path)
		pathsLength.add(occurrence.pathLength)
		if (paths.size() === acoParameters.nunberOfAnts) {
			pheromones = updatePheromones()
			numberOfIterationsDone++
			if (pathsLength.get(pathsLength.indexOf(pathsLength.max())) > currentBestPathLength) {
				currentBestPath = paths.get(pathsLength.indexOf(pathsLength.max()))
				currentBestPathLength = pathsLength.get(pathsLength.indexOf(pathsLength.max()))
			}
			if (numberOfIterationsDone === acoParameters.numberOfIterations) {
				emit(new OptimizationFinished(pheromones, currentBestPath, currentBestPathLength))
			}
			else {
				innerContext.defaultSpace.emit(ID, new NewIteration(pheromones))
			}
		}
	}

	def launchACOAgents() {
		for (var i = 0; i < acoParameters.nunberOfAnts; i++) {
			val childID = UUID.randomUUID
			info("Spawning new ACOAgent on City :" + i)
			ACOAgent.spawnInContextWithID(childID, innerContext, myUUID, i, acoParameters)
		}
	}

	def launchIterations() {
		numberOfIterationsDone = 0
		currentBestPathLength = 0
		initializePheromones(0d)
		paths = new ArrayList<ArrayList<Integer>>
		pathsLength = new ArrayList<Integer>
		innerContext.defaultSpace.emit(ID, new NewIteration(pheromones))
	}
	


	def initializePheromones(initialPheromoneValue : Double) {
		for (var i = 0; i < acoParameters.numberOfCities; i++) {
			var temp : Double[]
			for (var j = 0; j < acoParameters.numberOfCities; j++) {
				temp.add(initialPheromoneValue)
			}
			pheromones.add(temp)
		}
	}

	def updatePheromones() {
		var newPheromones : Double[][]
		var sumOfpheromoneDelta = pheromoneDeltaComputation()
		for (var i = 0; i < acoParameters.numberOfCities; i++) {
			var temp : Double[]
			for (var j = 0; j < acoParameters.numberOfCities; j++) {
				var newValue = acoParameters.pheromoneEvaporationFactor * pheromones.get(i).get(j) + sumOfpheromoneDelta
				temp.add(newValue)
			}
			newPheromones.add(temp)
		}
		return newPheromones
	}

	def pheromoneDeltaComputation() {
		var sumOfpheromoneDelta = 0d
		for (var k = 0; k < paths.size(); k++) {
			for (var i = 0; i < acoParameters.numberOfCities; i++) {
				for (var j = 0; j < acoParameters.numberOfCities; j++) {
					if (paths.get(k).contains(i) && paths.get(k).contains(j))
						sumOfpheromoneDelta += 1 / pathsLength.get(k)
				}
			}
		}
		return sumOfpheromoneDelta
	}

}
